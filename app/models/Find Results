Searching 484 files for "set_reset"

/Users/Tomato2/Development/code/ChoreTrackerOnRails/ChoreTrackerOnRails_app/app/controllers/chores_controller.rb:
    9    def create
   10      @chore = @list.chores.new(chore_params)
   11:     @chore.reset_time = Chore.set_reset(Time.now, @chore.frequency)
   12  
   13      if @chore.save

/Users/Tomato2/Development/code/ChoreTrackerOnRails/ChoreTrackerOnRails_app/app/models/chore.rb:
   74  
   75  #Create the time a "completed" chore will show back up on the list
   76:   def self.set_reset(now, frequency)
   77      subtract_time = now - now.strftime("%H").to_i.hours - now.strftime("%M").to_i.minutes - now.strftime("%S").to_i.seconds
   78      if frequency == "daily"
   ..
   98      now = Time.now
   99      status = "done"
  100:     reset_time = set_reset(now, chore.frequency)
  101      past_due_time = set_past_due(now, chore.time_of_day, chore.reset_time)
  102      chore.update(reset_time: reset_time, status: status, past_due_time: past_due_time)
  ...
  115      all_chores.each do |chore|
  116        if chore.status == "done" && chore.reset_time <= now
  117:         new_reset = set_reset(now, chore.frequency) 
  118          chore.update(reset_time: new_reset, status: "not done")
  119        end

/Users/Tomato2/Development/code/ChoreTrackerOnRails/ChoreTrackerOnRails_app/app/models/list.rb:
   34          chore.each_with_index do |attribute, i|
   35            new_chore.send(starter_chores[:chore_keys][i]+"=", attribute)
   36:           new_chore.reset_time = Chore.set_reset(Time.now, new_chore.frequency, new_chore.time_of_day)
   37          end
   38          new_chore.save

/Users/Tomato2/Development/code/ChoreTrackerOnRails/ChoreTrackerOnRails_app/log/development.log:
    <binary>

14 matches across 4 files
